{
	"nodes":[
		{"type":"group","id":"099890cd83cd5e3d","x":-2880,"y":-4880,"width":4320,"height":7120,"color":"2","label":"Program Flow Chart"},
		{"type":"group","id":"a419070bbc73dc70","x":2184,"y":-4640,"width":5776,"height":2960,"color":"#a44185","label":"Data"},
		{"type":"group","id":"4e4ce2653dd30ae1","x":2184,"y":-1440,"width":3200,"height":4160,"color":"#a69336","label":"Classes"},
		{"type":"group","id":"30a44c8f582f917b","x":5600,"y":-1440,"width":3120,"height":2320,"color":"#1544d1","label":"Dataflow"},
		{"type":"group","id":"2236fc0a7d8deb1f","x":2320,"y":-4520,"width":2360,"height":2600,"color":"1","label":"Project Yaml configs"},
		{"type":"group","id":"9e6cc714089d84d4","x":-612,"y":-720,"width":1892,"height":1443,"color":"6","label":"CLI commands"},
		{"type":"group","id":"96290568a99a2636","x":-937,"y":-3180,"width":1091,"height":1460,"color":"5","label":"Renderers and Aces"},
		{"type":"group","id":"b73a66cffe0dc909","x":-1680,"y":-4760,"width":2480,"height":560,"color":"3","label":"Entry Point"},
		{"type":"file","file":"Main_app_config_example.md","id":"d8fe6a9f79204159","x":3584,"y":-4440,"width":1020,"height":640,"color":"#e96d6d"},
		{"type":"file","file":"Project_data.md","id":"68eabf598491a7f2","x":2404,"y":-4440,"width":1140,"height":480,"color":"#e96d6d"},
		{"type":"file","file":"project_template.md","id":"4d9efe24d8b858b6","x":2404,"y":-3920,"width":1140,"height":640,"color":"#e96d6d"},
		{"type":"file","file":"project_template_master.md","id":"ae6ae7d3fd8aee1d","x":2404,"y":-3240,"width":1140,"height":660,"color":"#e96d6d"},
		{"type":"text","text":"Config Data","id":"49ff88e3740c0b19","x":4800,"y":-4440,"width":1140,"height":433},
		{"type":"text","text":"Config Object Class\n---\n#class\nMethods:\n- convert_paths (data)\n\t- converts paths to strings\n- Write_dotenv (data, path)\n\t- writes out env file\n- read_dotenv(path)\n\t- reads env file to dictionary\n- ","id":"47420136880627b4","x":2320,"y":-1310,"width":880,"height":780},
		{"type":"text","text":"dataflow","id":"493a62348a7651e9","x":5745,"y":-1280,"width":575,"height":320},
		{"type":"text","text":"","id":"72ac7b664477982f","x":5745,"y":-720,"width":575,"height":520},
		{"type":"text","text":"Project parse class\n---\n#class\nmethods:\n- init\n\t- init yaml\n\t- init config_data\n\t- project_data_file path\n\t- project_data_config\n\t\t- configdata object created using configdata class\n\t- project data\n\t- project data:\n\t\t- update from dictionary\n\t- project data template file path\n\t- project template config\n\t\t- load configdata class using the template file\n\t- init env vars\n","id":"55a50a8bb2bb4a58","x":3280,"y":-1310,"width":840,"height":830},
		{"type":"text","text":"Refresh project data class\n---\n#class\nvars:\n- env_vars\n- hou_vars\n- new_template dictionary from template config\n\nmethods:\n- process_dirs\n\t- nonlocal env_vars\n\t- nonlocal hou_vars\n\t- this processes the enviornment variables and compiles them together\n- convert paths\n\t- convert paths to strings\n- write_file(data,path)\n\t- writes paths converted strings to yaml file\n- update_configs\n\t- ","id":"25cc00f030c02831","x":3280,"y":-400,"width":840,"height":1195},
		{"type":"text","text":"Config Data Class\n---\n#class\nMethods:\n- init(config)\n\t- initializes yaml obj\n\t- config var\n\t- config file path\n\t- loads config file\n- load file(file_path)\n\t- loads yaml file\n- update dict(other_dict)\n\t- takes another dictionary and updates the one stored in this object\n- write_file\n\t- write yaml file to path\n- refresh\n\t- loads config file into object\n- update\n\t- writes config to file\n- print data\n\t- prints the data to the console\n\t- debug purposes\n- convert paths\n\t- converts paths in data to strings\n\t- returns string data\n","id":"f0bf305ea75ec75b","x":2320,"y":-435,"width":880,"height":1230},
		{"type":"file","file":"index.md","id":"f47522d551fcd3d6","x":2274,"y":-6000,"width":926,"height":639},
		{"type":"text","text":"do you wish to open this project?","id":"a530f87b2f76abcc","x":-752,"y":-1676,"width":534,"height":104,"color":"5"},
		{"type":"text","text":"is this the first time opening project","id":"31241dc36ab4c604","x":-2058,"y":-1516,"width":568,"height":88,"color":"5"},
		{"type":"text","text":"would you like to change the houdini version?","id":"fa9537b5f60a9451","x":-2645,"y":-1276,"width":587,"height":115,"color":"5"},
		{"type":"text","text":"change houdini version","id":"1b4f211a1fa26b6d","x":-2525,"y":-960,"width":348,"height":64},
		{"type":"text","text":"Open existing project","id":"3c21c2faf9d1109c","x":-1609,"y":-4315,"width":346,"height":65},
		{"type":"text","text":"projects exists","id":"340fc82ce62ee458","x":-1561,"y":-4018,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"setup 3Delight","id":"bcf9126a0ec0c2ca","x":-173,"y":-2640,"width":307,"height":80,"color":"2"},
		{"type":"text","text":"do you wish to create  a new project?","id":"d3ab187a4fee01fd","x":-8,"y":-3720,"width":352,"height":124,"color":"5"},
		{"type":"text","text":"setup redshift","id":"39ad0973b285b18a","x":-340,"y":-2940,"width":333,"height":127,"color":"2"},
		{"type":"text","text":"will this use 3Delight","id":"ef175342bd0873be","x":-917,"y":-2760,"width":330,"height":79,"color":"5"},
		{"type":"text","text":"choose where to create new project","id":"da1b8b8b03162f09","x":-870,"y":-3360,"width":522,"height":80},
		{"type":"text","text":"does this project use redshift?","id":"988e1280f5404bb8","x":-810,"y":-3120,"width":401,"height":80,"color":"5"},
		{"type":"text","text":"","id":"cce7f7cc482cbdea","x":194,"y":-351,"width":250,"height":60},
		{"type":"text","text":"","id":"e3d110215070bf8a","x":243,"y":3,"width":250,"height":60},
		{"type":"text","text":"","id":"c1648374e05cadc4","x":425,"y":-535,"width":250,"height":60},
		{"type":"text","text":"","id":"b2f5b7b50ab4fd6f","x":572,"y":112,"width":250,"height":60},
		{"type":"text","text":"--Help","id":"2c33b55f3206e330","x":-592,"y":-700,"width":280,"height":140},
		{"type":"text","text":"Add existing project","id":"18c1e23c6ec728e9","x":-508,"y":-4310,"width":380,"height":60},
		{"type":"text","text":"choose path to scan","id":"80ffdfb124da5f2c","x":-486,"y":-4018,"width":335,"height":50},
		{"type":"text","text":"create new project","id":"0a0b167f42943a38","x":415,"y":-4310,"width":315,"height":60},
		{"type":"text","text":"entry point","id":"9005610caf182259","x":444,"y":-4720,"width":286,"height":80},
		{"type":"text","text":"","id":"5317e3a1b59fb557","x":-465,"y":-433,"width":250,"height":60},
		{"type":"text","text":"","id":"529e864a29b8e86c","x":-248,"y":-160,"width":250,"height":60},
		{"type":"text","text":"do you wish to create a new shot?","id":"cfb4ab43d8b655da","x":-1357,"y":80,"width":393,"height":107,"color":"5"},
		{"type":"text","text":"","id":"5b958e40594e04d1","x":-320,"y":124,"width":250,"height":60},
		{"type":"text","text":"","id":"e2080f9230edbd1c","x":2,"y":-556,"width":250,"height":60},
		{"type":"text","text":"create new file","id":"b30c08d5b6b6dca6","x":-1683,"y":1128,"width":319,"height":161},
		{"type":"text","text":"choose naming convention or custom name","id":"b7ee44eed6e685f6","x":-1683,"y":1368,"width":319,"height":138},
		{"type":"text","text":"open houdini fine with all the project resources open","id":"93a58aadcb3beba4","x":-1866,"y":1760,"width":315,"height":185,"color":"4"},
		{"type":"text","text":"create new shot?","id":"88d50d4a43fa6db3","x":-1791,"y":80,"width":336,"height":54},
		{"type":"text","text":"choose shot","id":"b831d64e19f3b03e","x":-2180,"y":360,"width":250,"height":60},
		{"type":"text","text":"which shot do you wish to open?","id":"87ac039214a9cd60","x":-2100,"y":80,"width":281,"height":93},
		{"type":"text","text":"open project","id":"a5d23e3f93d9b3a5","x":-1992,"y":-340,"width":250,"height":50},
		{"type":"text","text":"shots exist","id":"b790c910f7b223c5","x":-1992,"y":-200,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"project exists","id":"2fc9f963408ba8dd","x":-1926,"y":-720,"width":303,"height":61,"color":"5"},
		{"type":"text","text":"error message","id":"b54977f006db9712","x":-1482,"y":-560,"width":250,"height":60},
		{"type":"text","text":"add to main config","id":"2aa44be5d5448c60","x":-2540,"y":-740,"width":379,"height":102,"color":"1"},
		{"type":"text","text":"scan shot dir for houdini files","id":"e5eec2e305f5e7af","x":-2264,"y":600,"width":419,"height":143},
		{"type":"text","text":"Houdini files exist","id":"586d29decae8c542","x":-1988,"y":920,"width":246,"height":108,"color":"5"},
		{"type":"text","text":"choose which file to open from list","id":"fe342122e88ea223","x":-2028,"y":1248,"width":324,"height":120},
		{"type":"text","text":"choose project","id":"dafc356d44cadb44","x":-1874,"y":-3796,"width":265,"height":76},
		{"type":"text","text":"will this uses ACES?","id":"9b6903d108f601f4","x":-794,"y":-2120,"width":370,"height":79,"color":"5"},
		{"type":"text","text":"return to original prompt","id":"651d7ad799418f0f","x":311,"y":-1984,"width":419,"height":83},
		{"type":"text","text":"setup ACES","id":"81c5f8a43f19baf8","x":-173,"y":-1931,"width":250,"height":60,"color":"2"},
		{"type":"text","text":"do you wish to open a different project?","id":"79bb1fdcd7940b33","x":-963,"y":-1333,"width":1307,"height":114,"color":"5"},
		{"id":"723f034b0e77c88a","x":2320,"y":840,"width":880,"height":660,"type":"text","text":"ShotConfig Class\n---\n#class\nMethods\n- init\n\t- initialized\n\t- name\n\t- index\n\t- users\n\t- init_date\n\t- project_root\n\t- parent path\n\t- env\n\t- path\n\t- conifg\n\t- project config\n\t- env file\n\t- description\n- main config list date\n\t- separates out the date just for main project config to use\n- has attr\n\t- checks is attribute exists\n- update paths\n\t- updates paths in config\n\t\t- self path\n\t\t- parent path\n\t\t- config path\n\t\t- project root\n\t\t- shots path\n- load from file\n\t- loads yaml from file\n- update from dictionary\n\t- updates another dictionary with the dict that stores all the config items\n- to yaml\n- from yaml\n\n\n\n\n\n\n```python\n@yaml_object(yaml)\nclass ShotConfig(object):\n    yaml_tag = u'!project'\n    def __init__(self) -> None:\n        self.initialized = None\n        self.name = None\n        self.index = None\n        self.users = None\n        self.init_date = None\n        self.project_root = None\n        self.parent_path = None\n        self.env = None\n        self.path = None\n        self.config = None\n        self.project_config = None\n        self.env_file = None\n        self.description = None\n    def main_config_list_data(self):\n        result = {}\n        result['name']=self.name\n        result['path']=self.path\n        result['config']=pathlib.Path(self.config)/'shot_data.yml'\n        return result\n    def has_attr(self,attr:str):\n        return hasattr(self, attr)\n    def update_paths(self,config_data):\n        self.path = config_data['path']\n        self.parent_path = pathlib.Path(config_data['path']).parents[0]\n        self.config = config_data['config']\n        self.project_root = config_data['path']\n        self.shots = config_data['shots']\n    def load_from_file(self,path):\n        yaml = YAML()\n        new_path = None\n        if isinstance(path,str):\n            new_path = pathlib.Path(path)\n        else:\n            new_path = path\n        result = {}\n        with new_path.open('r') as f:\n            try:\n                conf = yaml.load_all(f)\n                result = ParseYamlLoad(conf).return_data\n\n            except yaml.YAMLError as exc:\n                print(exc)\n        self.update_from_dict(result)\n    def update_from_dict(self, my_dict):\n        #print('updating obj')\n        #pprint(my_dict)\n        for key, value in my_dict.items():\n            if self.has_attr(key):\n                for a in dir(self):\n                    if not a.startswith('__') and not callable(a) and a == key:\n                        setattr(self,a,value)\n                        #print(getattr(self,a))\n    @classmethod\n    def to_yaml(cls,representer,node):\n        return representer.represent_scalar(cls.yaml_tag,u'{.initialized}-{.name}-{.users}-{.init_date}'.format(node,node))\n    @classmethod\n    def from_yaml(cls,constructor,node):\n        return cls(*node.value.split('-'))\n\n```"},
		{"type":"file","file":"shot_data_template.md","id":"81a5e42c651ec1e0","x":3584,"y":-3740,"width":1020,"height":640,"color":"#e96d6d"},
		{"type":"file","file":"temp_list_subdirs.md","id":"2233940753ee28ca","x":3584,"y":-3040,"width":1020,"height":740,"color":"#e96d6d"},
		{"id":"260d5828165c6cac","x":3280,"y":840,"width":866,"height":585,"type":"text","text":"ShotData Class\n---\n#class #dataclass\n\nmethods:\n- init\n\t- \n"},
		{"id":"4c0d4f16b723baf8","x":4200,"y":-1310,"width":840,"height":1110,"type":"text","text":"Project Setup Class\n---\n#class\nmethods:\n- init(tempalte_path)\n\t- yaml obj\n\t- template path\n\t- project template file \n\t- project config data using `ConfigData`\n\t- data from `configdata`\n\t- shot_data\n\t\t- initialized from `shotdata` method\n\t- shot_template\n\t\t- template from shotdata\n\t- config_path\n\t- new_template\n- Methods\n\t- set template path\n\t\t- sets the template path to the master yaml template\n\t- create configs\n\t\t- converts data and writes the files\n\t- save templates\n\t\t- saves templates to config folder\n\t- create_project(config_data)\n\t\t- creates all the folders and files for project in the specified location\n\n\n```python\nclass ProjectSetup(object):\n\n    def __init__(self,template_path=None) -> None:\n        #self.keys_path = keys_path\n        # self.data = data\n        # project_template.yml\n        self.yaml = YAML(typ=\"safe\")\n        self.template_path = template_path\n        self.project_temp_file = self.set_template_path(self.template_path)\n        self.config = ConfigData(self.project_temp_file)\n        self.data = self.config.data\n        self.project_data = self.data['None']['project_root']\n        self.shot_data = ShotData()\n        self.shot_template = self.shot_data.data\n        self.enviornment_variables = {}\n        self.config_path = None\n        self.new_template = None\n    def set_template_path(self,path):\n        '''\n        Sets application default if none is provided\n        '''\n        if self.template_path is None:\n            return pathlib.Path(application_path)/'project_template_master.yml'\n        else:\n            return path\n    def create_configs(self,c_data):\n        #print(c_data['config'])\n        #print(self.config_path)\n        converted_data = self.config.convert_paths(c_data)\n        # monkey patch:\n        ruamel.yaml.representer.RoundTripRepresenter.ignore_aliases = lambda x, y: True\n        # pprint(self.data)\n        fp = pathlib.Path(self.config_path)/'project_data.yml'\n        with fp.open('w') as f:\n            self.yaml.default_flow_style = False\n            self.yaml.dump(dict(converted_data),f)\n            # f.write(str(self.yaml.dump(dict(self.data),self.config_file,default_flow_style=False)))\n        # self.save_templates()\n    def save_templates(self):\n        template_list = [\n            {\n                'data':self.new_template,\n                'filename':'project_template.yml'\n            },\n            {\n                'data':self.shot_template,\n                'filename':'shot_template.yml'\n            }\n            ]\n        for item in template_list:\n            #print('data')\n            #print(type(item['data']))\n            data = {}\n            if isinstance(item['data'],list):\n                print(type(item['data'][0]))\n                print(item['data'][0])\n                data['None'] = item['data']\n            if isinstance(item['data'],dict):\n                data['None']=item['data']\n            converted_data = self.config.convert_paths(data)\n            ruamel.yaml.representer.RoundTripRepresenter.ignore_aliases = lambda x, y: True\n            fp = pathlib.Path(self.config_path)/item['filename']\n            with fp.open('w') as f:\n                self.yaml.default_flow_style = False\n                self.yaml.dump(dict(converted_data),f)\n\n    def create_project(self,config_data):\n        #pprint(self.shot_data.data)\n        env_vars = {}\n        hou_vars = {}\n        #self.new_template = config_data\n        new_tempalte = config_data\n        def create_dir_if_not_present(dirpath):\n            if not dirpath.exists():\n                #print(f'+D/..........................Creating new {dirpath.name} Directory in {dirpath.parent}...')\n                pathlib.Path(dirpath).mkdir(parents=True,exist_ok=True)\n            else:\n                #print(f'!!!--------------Directory <{dirpath.name}> in {dirpath.parent} exists! Skipping...')\n                pass\n        def add_gitkeep(path):\n            fp = pathlib.Path(path)/'.gitkeep'\n            fp.open(\"w\",encoding=\"utf-8\")\n        def add_file(path,f):\n            fp = pathlib.Path(path)/f\n            fp.open(\"w\",encoding=\"utf-8\")\n\n        test_root = pathlib.Path(application_path)\n\n        def process_dirs(data,path):\n            nonlocal env_vars\n            nonlocal hou_vars\n            current_path = pathlib.Path(path).joinpath(data['name'])\n            data['path']=current_path\n            create_dir_if_not_present(current_path)\n\n            if data['gitkeep']:\n                add_gitkeep(current_path)\n            if data['files'] is not None:\n                add_file(current_path,data['files'])\n            if data['env'] is not None:\n                env_vars[data['env']]=current_path\n            if data['h_env'] is not None:\n                if data['h_env'] in hou_vars:\n                    print('item exists')\n                    print(hou_vars[data['h_env']])\n                    #print(f'{data[\"h_env\"]} + {hou_vars[data[\"h_env\"]]}')\n                else:\n                    hou_vars[data['h_env']]=current_path\n            if data['name']=='.config':\n                self.config_path = pathlib.Path(current_path)\n            # if config is not None and data['name']=='.config':\n            #     create_project_config(current_path,config)\n            if data['children'] is not None:\n                for obj in data['children']:\n                    # pprint(obj)\n                    process_dirs(obj,current_path)\n\n        if config_data is not None:\n            self.project_data['name']=config_data['name']\n            process_dirs(self.project_data,config_data['parent_path'])\n        else:\n            process_dirs(self.project_data,test_root)\n\n        self.new_template = self.project_data\n\n        self.enviornment_variables['env_vars']=env_vars\n        self.enviornment_variables['houdini_vars']=hou_vars\n\n```"},
		{"id":"1e1867df4893184f","x":4200,"y":-145,"width":840,"height":465,"type":"text","text":"DotenvData Class\n---\n#class\nmethds:\n- init\n\t- data\n\t- path\n- read data\n\t- reads dotenv\n- write data\n\t- writes dotenv"}
	],
	"edges":[
		{"id":"d66e519be6ed03b3","fromNode":"9005610caf182259","fromSide":"bottom","toNode":"3c21c2faf9d1109c","toSide":"top"},
		{"id":"9922b39612dc77cd","fromNode":"9005610caf182259","fromSide":"bottom","toNode":"18c1e23c6ec728e9","toSide":"top"},
		{"id":"4ede9ff34238d75b","fromNode":"9005610caf182259","fromSide":"bottom","toNode":"0a0b167f42943a38","toSide":"top"},
		{"id":"fb7cda485e9b941c","fromNode":"3c21c2faf9d1109c","fromSide":"bottom","toNode":"340fc82ce62ee458","toSide":"top"},
		{"id":"4d0719444dd9e9af","fromNode":"340fc82ce62ee458","fromSide":"left","toNode":"dafc356d44cadb44","toSide":"top","color":"4","label":"yes"},
		{"id":"7b0e47d7b6abb2f0","fromNode":"340fc82ce62ee458","fromSide":"bottom","toNode":"d3ab187a4fee01fd","toSide":"top","color":"1","label":"no"},
		{"id":"03718ef36a72c2cc","fromNode":"d3ab187a4fee01fd","fromSide":"bottom","toNode":"da1b8b8b03162f09","toSide":"top","color":"4","label":"yes"},
		{"id":"877b055a860d1383","fromNode":"d3ab187a4fee01fd","fromSide":"right","toNode":"651d7ad799418f0f","toSide":"top","color":"1","label":"no"},
		{"id":"de2b6985beac7c3b","fromNode":"18c1e23c6ec728e9","fromSide":"bottom","toNode":"80ffdfb124da5f2c","toSide":"top"},
		{"id":"59aa056261fd568c","fromNode":"80ffdfb124da5f2c","fromSide":"left","toNode":"340fc82ce62ee458","toSide":"right"},
		{"id":"17330e8700f7e5f0","fromNode":"0a0b167f42943a38","fromSide":"bottom","toNode":"d3ab187a4fee01fd","toSide":"top"},
		{"id":"8401dc9c6505a1e9","fromNode":"2fc9f963408ba8dd","fromSide":"bottom","toNode":"a5d23e3f93d9b3a5","toSide":"top","color":"4","label":"yes"},
		{"id":"71b3ebd8d77a36a2","fromNode":"2fc9f963408ba8dd","fromSide":"right","toNode":"b54977f006db9712","toSide":"top","color":"1","label":"no"},
		{"id":"f4b3851295d77a15","fromNode":"a530f87b2f76abcc","fromSide":"bottom","toNode":"79bb1fdcd7940b33","toSide":"top","color":"1","label":"no"},
		{"id":"e79e6f11fe2bc5fa","fromNode":"79bb1fdcd7940b33","fromSide":"left","toNode":"3c21c2faf9d1109c","toSide":"right","color":"4","label":"yes"},
		{"id":"257070c8385a32c8","fromNode":"79bb1fdcd7940b33","fromSide":"right","toNode":"651d7ad799418f0f","toSide":"bottom","color":"1","label":"no"},
		{"id":"ae0c05e4af5d544d","fromNode":"a5d23e3f93d9b3a5","fromSide":"bottom","toNode":"b790c910f7b223c5","toSide":"top"},
		{"id":"3e4f79934a313afb","fromNode":"b790c910f7b223c5","fromSide":"bottom","toNode":"87ac039214a9cd60","toSide":"top","color":"4","label":"yes"},
		{"id":"d6beb7dd0a6c11c6","fromNode":"b790c910f7b223c5","fromSide":"right","toNode":"cfb4ab43d8b655da","toSide":"top","color":"1","label":"no"},
		{"id":"f32bce85501455d6","fromNode":"651d7ad799418f0f","fromSide":"right","toNode":"9005610caf182259","toSide":"right"},
		{"id":"f954ce21ccf2e25c","fromNode":"a530f87b2f76abcc","fromSide":"left","toNode":"31241dc36ab4c604","toSide":"top","color":"4","label":"yes"},
		{"id":"3f5ee7026c39f753","fromNode":"31241dc36ab4c604","fromSide":"left","toNode":"fa9537b5f60a9451","toSide":"top","color":"4","label":"yes"},
		{"id":"b3a65f89ed251dc0","fromNode":"fa9537b5f60a9451","fromSide":"bottom","toNode":"1b4f211a1fa26b6d","toSide":"top","color":"4","label":"yes"},
		{"id":"4905f8ec1d6413ce","fromNode":"31241dc36ab4c604","fromSide":"bottom","toNode":"2fc9f963408ba8dd","toSide":"top","color":"1","label":"no"},
		{"id":"abec08f1860757aa","fromNode":"dafc356d44cadb44","fromSide":"bottom","toNode":"31241dc36ab4c604","toSide":"top"},
		{"id":"9508594a45eabd78","fromNode":"b790c910f7b223c5","fromSide":"bottom","toNode":"88d50d4a43fa6db3","toSide":"top"},
		{"id":"0982aaab35db7b92","fromNode":"88d50d4a43fa6db3","fromSide":"bottom","toNode":"b831d64e19f3b03e","toSide":"top"},
		{"id":"9e82748cd430c9e9","fromNode":"87ac039214a9cd60","fromSide":"bottom","toNode":"b831d64e19f3b03e","toSide":"top"},
		{"id":"18050114ed1885fc","fromNode":"b831d64e19f3b03e","fromSide":"left","toNode":"b790c910f7b223c5","toSide":"left"},
		{"id":"9fbaaaf1206bf6f7","fromNode":"b831d64e19f3b03e","fromSide":"bottom","toNode":"e5eec2e305f5e7af","toSide":"top"},
		{"id":"e4d882827eabd1ad","fromNode":"e5eec2e305f5e7af","fromSide":"bottom","toNode":"586d29decae8c542","toSide":"top"},
		{"id":"b82c21afede212a3","fromNode":"586d29decae8c542","fromSide":"bottom","toNode":"fe342122e88ea223","toSide":"top","color":"4","label":"yes"},
		{"id":"9735125944dc2ff8","fromNode":"586d29decae8c542","fromSide":"right","toNode":"b30c08d5b6b6dca6","toSide":"top","color":"1","label":"no"},
		{"id":"9c84e49b00bac4d0","fromNode":"b30c08d5b6b6dca6","fromSide":"bottom","toNode":"b7ee44eed6e685f6","toSide":"top"},
		{"id":"c76f13a568a542aa","fromNode":"b7ee44eed6e685f6","fromSide":"bottom","toNode":"93a58aadcb3beba4","toSide":"top"},
		{"id":"47d7ea4d1a4825a7","fromNode":"fe342122e88ea223","fromSide":"bottom","toNode":"93a58aadcb3beba4","toSide":"top"},
		{"id":"9c45dc2936145e11","fromNode":"da1b8b8b03162f09","fromSide":"bottom","toNode":"988e1280f5404bb8","toSide":"top"},
		{"id":"11585674c92e39d5","fromNode":"988e1280f5404bb8","fromSide":"right","toNode":"39ad0973b285b18a","toSide":"top","color":"4","label":"yes"},
		{"id":"c21fe1d496c8cd4b","fromNode":"988e1280f5404bb8","fromSide":"bottom","toNode":"ef175342bd0873be","toSide":"top","color":"1","label":"no"},
		{"id":"abded7065164542d","fromNode":"ef175342bd0873be","fromSide":"right","toNode":"bcf9126a0ec0c2ca","toSide":"left","color":"4","label":"yes"},
		{"id":"c02746a721d87c32","fromNode":"39ad0973b285b18a","fromSide":"bottom","toNode":"9b6903d108f601f4","toSide":"top"},
		{"id":"ba7c9c7e17568825","fromNode":"bcf9126a0ec0c2ca","fromSide":"bottom","toNode":"9b6903d108f601f4","toSide":"top"},
		{"id":"eafaec5a7b5c3fd5","fromNode":"ef175342bd0873be","fromSide":"bottom","toNode":"9b6903d108f601f4","toSide":"top","color":"1","label":"no"},
		{"id":"88f14b1492be5603","fromNode":"9b6903d108f601f4","fromSide":"right","toNode":"81c5f8a43f19baf8","toSide":"top","color":"4","label":"yes"},
		{"id":"3f5314d18813d97e","fromNode":"9b6903d108f601f4","fromSide":"bottom","toNode":"a530f87b2f76abcc","toSide":"top","color":"1","label":"no"},
		{"id":"b4403519e38bd6b6","fromNode":"81c5f8a43f19baf8","fromSide":"bottom","toNode":"a530f87b2f76abcc","toSide":"top"},
		{"id":"5b932862480551b9","fromNode":"1b4f211a1fa26b6d","fromSide":"bottom","toNode":"2aa44be5d5448c60","toSide":"top"},
		{"id":"ab77d86b462fbb0a","fromNode":"2aa44be5d5448c60","fromSide":"right","toNode":"2fc9f963408ba8dd","toSide":"left"}
	]
}